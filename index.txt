var express = require('express');
var router = express.Router();





const announcementModel = require('../models/announcement.js')






// req: request -> gelen istek
// res: response -> cevap
// next: sonraki işlem

// GET methodu (veri isteme) ile gelen isteklerde çalışacak fonksiyon
// domain.tld/deneme/
router.get('/', function(req, res, next) {
  res.send('respond with a resource'); // cevap döndür
});

// GET methodu (veri isteme) ile gelen isteklerde çalışacak fonksiyon
// domain.tld/deneme/merhaba
router.get('/merhaba', function(req, res, next) {
  // merhaba adresindeki verileri bulup cevap olarak döndürmeyi burası yapar
  res.send('sanada merhaba'); // cevap döndür
});

// POST methodu (veri gönderme) ile gelen isteklerde çalışacak fonksiyon
// domain.tld/deneme/merhaba
router.post('/merhaba', function(req, res, next) {
  console.log(req.body) // gelen veriyi (req.body üzerinden gelen veriye erişilir) konsola yazdır
  announcementModel.create
  res.send('verini oluşturdum'); // cevap döndür
});

// PUT methodu (veri güncelleme) ile gelen isteklerde çalışacak fonksiyon
// domain.tld/deneme/merhaba
router.put('/merhaba', function(req, res, next) {
  console.log(req.body) // gelen veriyi (req.body üzerinden gelen veriye erişilir) konsola yazdır
  /*

  buraya veriyi veritabanından güncellemek için gerekli kodlar yazılabilir

  */
  res.send('verini güncelledim'); // cevap döndür
});

// DELETE methodu (veri silme) ile gelen isteklerde çalışacak fonksiyon
// domain.tld/deneme/merhaba
router.delete('/merhaba', function(req, res, next) {
  console.log(req.body) // gelen veriyi (req.body üzerinden gelen veriye erişilir) konsola yazdır
  /*

  buraya veriyi veritabanından silmek için gerekli kodlar yazılabilir

  */
  res.send('verini sildim'); // cevap döndür
});

module.exports = router;





























// burada örnek veri tabanı işlemlerini bulabilirsin (örneğin veri tabanına veri eklemek, veri güncellemek, veri silmek)
// bu dosyayı require eden dosyada router değişkenine ulaşabiliriz
// mongodb gibi veri tabanları için mongoose kütüphanesini kullanabiliriz

// mongodb nodejs crud operations (create, read, update, delete) ile googledan örneklerini bulabilirsin

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// Veri tabanı bağlantısı
mongoose.connect('mongodb://localhost:27017/veritabani', {useNewUrlParser: true, useUnifiedTopology: true});

// Veri tabanı şeması
const veriTabaniSema = new Schema({
  isim: String,
  soyisim: String,
  yas: Number
});

// Veri tabanı modeli
const veriTabaniModel = mongoose.model('veriTabaniModel', veriTabaniSema);

// Veri tabanına veri ekleme
veriTabaniModel.create({
  isim: 'Ahmet',
  soyisim: 'Yıldız',
  yas: 25
}, function(err, veri){
    if(err) console.log(err);
    console.log(veri);
});

// Veri tabanındaki veriyi güncelleme
veriTabaniModel.updateOne({isim: 'Ahmet'}, {yas: 26}, function(err, veri){
    if(err) console.log(err);
    console.log(veri);
});

// Veri tabanındaki veriyi silme
veriTabaniModel.deleteOne({isim: 'Ahmet'}, function(err, veri){
    if(err) console.log(err);
    console.log(veri);
});

// Veri tabanındaki veriyi bulma
veriTabaniModel.find({isim: 'Ahmet'}, function(err, veri){
    if(err) console.log(err);
    console.log(veri);
});